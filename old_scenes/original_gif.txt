ATTENTION: SmoothSphere class was moved, and import in this file must be updated
"""
py-cgi - A python ray tracing program
Tomas Tamantini 2020
"""
from class_lib.color import *
from class_lib.imaging import Camera, Scene
from class_lib.light import *
from class_lib.solid_objects import *
from math import pi, sqrt, sin, cos

HEIGHT = 500
WIDTH = 600

num_frames = 30
images = []
for i in range(num_frames):
    print(f'Rendering frame {i + 1}/{num_frames}...')
    radius = 1
    theta = 2 * pi * i / num_frames
    big_radius = 10
    camera_position = Vector(7, 0, 6)

    d_small = radius * 2 / sqrt(3)
    d_big = sqrt(big_radius * big_radius + 2 * big_radius * radius)
    DEGREES_120 = pi * 2 / 3

    c1 = Vector(d_small * cos(theta), d_small * sin(theta), radius)
    c2 = Vector(d_small * cos(theta + DEGREES_120), d_small * sin(theta + DEGREES_120), radius)
    c3 = Vector(d_small * cos(theta - DEGREES_120), d_small * sin(theta - DEGREES_120), radius)
    cb = Vector(0, 0, radius - d_big)

    m1 = Material(diffuse_light_reflectivity=Color(0, 0.2, 0.2), specular_multiplier=0.5, reflective_index=0.3,
                  refractive_index=1.08,
                  refractive_attenuation=Color(0.01, 0.01, 0))
    m2 = Material(diffuse_light_reflectivity=WHITE * 0.4, specular_multiplier=0.2)
    m3 = Material(diffuse_light_reflectivity=GRAPE, specular_multiplier=0.5, reflective_index=0.4)
    mb = Material(diffuse_light_reflectivity=WHITE * 0.2, specular_multiplier=0.5, reflective_index=0.5)

    s1 = SmoothSphere(c1, radius, m1)
    s2 = SmoothSphere(c2, radius, m2)
    s3 = SmoothSphere(c3, radius, m3)
    base = SmoothSphere(cb, big_radius, mb)

    solid_objects = [s1, s2, s3, base]

    l1 = LightSourceAtInfinity(intensity=Color('#ffffff'), direction=Vector(2, -1, 3))
    l2 = PointLightSource(intensity=Color('#ffff00'), intensity_booster=4, position=Vector(2, 2, 3))
    illumination = Illumination(ambient_light=AmbientLight(intensity=WHITE * 0.3), light_sources=[l1, l2])

    camera = Camera(resolution=(HEIGHT, WIDTH), position=camera_position, direction=-camera_position, zoom=1,
                    tilt_angle=0)

    s = Scene(camera, solid_objects, illumination)
    im = s.render_image()
    images.append(im.as_pillow_image())
    im.save_as_png(f'output/animation/frame{i}.png')

print('Creating GIF')
images[0].save('output/animation/animation_test.gif', save_all=True, append_images=images[1:], duration=100, loop=0)